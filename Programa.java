/* Programa.java */
/* Generated By:JavaCC: Do not edit this line. Programa.java */
import java.util.logging.*;
import java.io.*;
import java.util.ArrayList;
class Programa implements ProgramaConstants {
        /*public static void main(String[]args) throws ParseException, TokenMgrError
	{
		Programa analizador=new Programa(System.in);
		analizador.Iniciar();
	}*/

        public static void main(String[] args) {
                try {
            Programa analizador = new Programa(new BufferedReader(new FileReader("./expresiones.txt")));
            analizador.Iniciar();
                        System.out.println("No se encontraron problemas.");
        } catch (ParseException e) {
            System.err.println(e.getMessage());
                        System.out.println("El programa presenta errores.");
        }
                catch (FileNotFoundException e) {
            System.err.println(e.getMessage());
        }
         catch(TokenMgrError e){
            System.err.println(e.getMessage());
        }
    }

  static final public void Iniciar() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORTAR:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      importarJava();
    }
    SentenciaNamespace();
    jj_consume_token(0);
}

  static final public void importarJava() throws ParseException {
    jj_consume_token(IMPORTAR);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PUNTO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PUNTO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    case ASTERISCO:{
      jj_consume_token(ASTERISCO);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
}

  static final public void SentenciaNamespace() throws ParseException {
    jj_consume_token(ESPACIONOMBRE);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(LLAVEAPERTURA);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASE:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      Produccion_Clase();
    }
    jj_consume_token(LLAVECERRADURA);
}

/* Regla de produccion de clase */
  static final public void Produccion_Clase() throws ParseException {
    jj_consume_token(CLASE);
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOSPUNTOS:{
      jj_consume_token(DOSPUNTOS);
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(LLAVEAPERTURA);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPOACCESO:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      Produccion_Metodo();
    }
    jj_consume_token(LLAVECERRADURA);
}

/* Regla de produccion de metodo */
  static final public void Produccion_Metodo() throws ParseException {
    Acceso_estatico();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIPOMETODO:{
      TipoMet_identi();
      break;
      }
    case TIPODATO:{
      Declaracion_variable();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARENTESISAPERTURA);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPODATO:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      Declaracion_variable();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        jj_consume_token(COMA);
        Declaracion_variable();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    }
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(LLAVEAPERTURA);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPRESION:
      case CAPTURARDATO:
      case OPERACIONESCARACTER:
      case ABRIRARCHIVO:
      case COPIARCADENA:
      case COMPARARCADENA:
      case ENCONTRARCADENA:
      case CONCATENARCADENA:
      case NUMEROALEATORIO:
      case PARENTESISAPERTURA:
      case LISTA:
      case PRIMEROLISTA:
      case ULTIMOLISTA:
      case OBTENER:
      case ASIGNAR:
      case PARA:
      case MIENTRAS:
      case CADAUNO:
      case CONDICION:
      case FLUJOCONTROL:
      case INTENTAR:
      case TIPODATO:
      case ESTRUCTURA:
      case AMPERSON:
      case CREAR:
      case USAR:
      case INSERTAR:
      case SELECCIONAR:
      case MAXIMOLISTA:
      case MINIMOLISTA:
      case QUITARESPACIOS:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      Bloque();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REGRESAR:{
      RegresaValor();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(LLAVECERRADURA);
}

  static final public void TipoMet_identi() throws ParseException {
    jj_consume_token(TIPOMETODO);
    jj_consume_token(IDENTIFICADOR);
}

  static final public void Declaracion_variable() throws ParseException {
    jj_consume_token(TIPODATO);
    jj_consume_token(IDENTIFICADOR);
}

  static final public void Acceso_estatico() throws ParseException {
    jj_consume_token(TIPOACCESO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ESTATICO:{
      jj_consume_token(ESTATICO);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
}

/* Regla de produccion de for */
  static final public void Instruccion_For() throws ParseException {
    jj_consume_token(PARA);
    jj_consume_token(PARENTESISAPERTURA);
    Asignacion_variable();
    jj_consume_token(SEMICOLON);
    Expresion_Booleana();
    jj_consume_token(SEMICOLON);
    Operacion_Aritmetica();
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(LLAVEAPERTURA);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPRESION:
      case CAPTURARDATO:
      case OPERACIONESCARACTER:
      case ABRIRARCHIVO:
      case COPIARCADENA:
      case COMPARARCADENA:
      case ENCONTRARCADENA:
      case CONCATENARCADENA:
      case NUMEROALEATORIO:
      case PARENTESISAPERTURA:
      case LISTA:
      case PRIMEROLISTA:
      case ULTIMOLISTA:
      case OBTENER:
      case ASIGNAR:
      case PARA:
      case MIENTRAS:
      case CADAUNO:
      case CONDICION:
      case FLUJOCONTROL:
      case INTENTAR:
      case TIPODATO:
      case ESTRUCTURA:
      case AMPERSON:
      case CREAR:
      case USAR:
      case INSERTAR:
      case SELECCIONAR:
      case MAXIMOLISTA:
      case MINIMOLISTA:
      case QUITARESPACIOS:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      Bloque();
    }
    jj_consume_token(LLAVECERRADURA);
}

  static final public void Asignacion_variable() throws ParseException {
    Declaracion_variable();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASIGNACION:{
      jj_consume_token(ASIGNACION);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:
      case NUMERODEC:{
        Valores_Numericos();
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      case BOOLEANO:{
        jj_consume_token(BOOLEANO);
        break;
        }
      case NUEVAINSTANCIA:{
        Instruccion_Arreglo();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
}

  static final public void Valores_Numericos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERO:{
      jj_consume_token(NUMERO);
      break;
      }
    case NUMERODEC:{
      jj_consume_token(NUMERODEC);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Expresion_Booleana() throws ParseException {
    jj_consume_token(OPERADORRELACIONAL);
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    case NUMERO:
    case NUMERODEC:{
      Valores_Numericos();
      break;
      }
    case BOOLEANO:{
      jj_consume_token(BOOLEANO);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Operacion_Aritmetica() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ASIGNACION);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    case NUMERO:
    case NUMERODEC:{
      Valores_Numericos();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPERADORMATEMATICO:{
        jj_consume_token(OPERADORMATEMATICO);
        break;
        }
      case ASTERISCO:{
        jj_consume_token(ASTERISCO);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      case NUMERO:
      case NUMERODEC:{
        Valores_Numericos();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASTERISCO:
      case OPERADORMATEMATICO:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_7;
      }
    }
}

/* Regla de produccion de switch */
  static final public void Instruccion_Switch() throws ParseException {
    jj_consume_token(FLUJOCONTROL);
    jj_consume_token(PARENTESISAPERTURA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(LLAVEAPERTURA);
    label_8:
    while (true) {
      jj_consume_token(CASO);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:
      case NUMERODEC:
      case CADENA:{
        Numeros_Letras();
        break;
        }
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DOSPUNTOS);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPRESION:
        case CAPTURARDATO:
        case OPERACIONESCARACTER:
        case ABRIRARCHIVO:
        case COPIARCADENA:
        case COMPARARCADENA:
        case ENCONTRARCADENA:
        case CONCATENARCADENA:
        case NUMEROALEATORIO:
        case PARENTESISAPERTURA:
        case LISTA:
        case PRIMEROLISTA:
        case ULTIMOLISTA:
        case OBTENER:
        case ASIGNAR:
        case PARA:
        case MIENTRAS:
        case CADAUNO:
        case CONDICION:
        case FLUJOCONTROL:
        case INTENTAR:
        case TIPODATO:
        case ESTRUCTURA:
        case AMPERSON:
        case CREAR:
        case USAR:
        case INSERTAR:
        case SELECCIONAR:
        case MAXIMOLISTA:
        case MINIMOLISTA:
        case QUITARESPACIOS:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
        Bloque();
      }
      jj_consume_token(DETENER);
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASO:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PORDEFECTO:{
      jj_consume_token(PORDEFECTO);
      jj_consume_token(DOSPUNTOS);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPRESION:
      case CAPTURARDATO:
      case OPERACIONESCARACTER:
      case ABRIRARCHIVO:
      case COPIARCADENA:
      case COMPARARCADENA:
      case ENCONTRARCADENA:
      case CONCATENARCADENA:
      case NUMEROALEATORIO:
      case PARENTESISAPERTURA:
      case LISTA:
      case PRIMEROLISTA:
      case ULTIMOLISTA:
      case OBTENER:
      case ASIGNAR:
      case PARA:
      case MIENTRAS:
      case CADAUNO:
      case CONDICION:
      case FLUJOCONTROL:
      case INTENTAR:
      case TIPODATO:
      case ESTRUCTURA:
      case AMPERSON:
      case CREAR:
      case USAR:
      case INSERTAR:
      case SELECCIONAR:
      case MAXIMOLISTA:
      case MINIMOLISTA:
      case QUITARESPACIOS:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        break label_10;
      }
      Bloque();
    }
    jj_consume_token(LLAVECERRADURA);
}

/* Regla de produccion del Arreglo */
  static final public void Instruccion_Arreglo() throws ParseException {
    jj_consume_token(NUEVAINSTANCIA);
    jj_consume_token(TIPODATO);
    jj_consume_token(CORCHETEAPERTURA);
    Lista_de_numPrima();
    jj_consume_token(CORCHETECERRADURA);
    jj_consume_token(SEMICOLON);
}

  static final public void Numeros_Letras() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERO:
    case NUMERODEC:{
      Valores_Numericos();
      break;
      }
    case CADENA:{
      jj_consume_token(CADENA);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void Lista_de_numPrima() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMERO:
    case NUMERODEC:
    case CADENA:{
      Numeros_Letras();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(COMA);
    Numeros_Letras();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:
    case NUMERO:
    case NUMERODEC:
    case CADENA:{
      Lista_de_numPrima();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
}

  static final public void Instruccion_If() throws ParseException {
    jj_consume_token(CONDICION);
    Expresion_Booleana();
    jj_consume_token(DOSPUNTOS);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPRESION:
      case CAPTURARDATO:
      case OPERACIONESCARACTER:
      case ABRIRARCHIVO:
      case COPIARCADENA:
      case COMPARARCADENA:
      case ENCONTRARCADENA:
      case CONCATENARCADENA:
      case NUMEROALEATORIO:
      case PARENTESISAPERTURA:
      case LISTA:
      case PRIMEROLISTA:
      case ULTIMOLISTA:
      case OBTENER:
      case ASIGNAR:
      case PARA:
      case MIENTRAS:
      case CADAUNO:
      case CONDICION:
      case FLUJOCONTROL:
      case INTENTAR:
      case TIPODATO:
      case ESTRUCTURA:
      case AMPERSON:
      case CREAR:
      case USAR:
      case INSERTAR:
      case SELECCIONAR:
      case MAXIMOLISTA:
      case MINIMOLISTA:
      case QUITARESPACIOS:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
      Bloque();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LLAVECERRADURA:{
      jj_consume_token(LLAVECERRADURA);
      break;
      }
    case SINO:{
      jj_consume_token(SINO);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPERADORRELACIONAL:{
        Expresion_Booleana();
        jj_consume_token(DOSPUNTOS);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPRESION:
        case CAPTURARDATO:
        case OPERACIONESCARACTER:
        case ABRIRARCHIVO:
        case COPIARCADENA:
        case COMPARARCADENA:
        case ENCONTRARCADENA:
        case CONCATENARCADENA:
        case NUMEROALEATORIO:
        case PARENTESISAPERTURA:
        case LISTA:
        case PRIMEROLISTA:
        case ULTIMOLISTA:
        case OBTENER:
        case ASIGNAR:
        case PARA:
        case MIENTRAS:
        case CADAUNO:
        case CONDICION:
        case FLUJOCONTROL:
        case INTENTAR:
        case TIPODATO:
        case ESTRUCTURA:
        case AMPERSON:
        case CREAR:
        case USAR:
        case INSERTAR:
        case SELECCIONAR:
        case MAXIMOLISTA:
        case MINIMOLISTA:
        case QUITARESPACIOS:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_12;
        }
        Bloque();
      }
      jj_consume_token(LLAVECERRADURA);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void instruccion_while() throws ParseException {
    jj_consume_token(MIENTRAS);
    Expresion_Booleana();
    jj_consume_token(LLAVEAPERTURA);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPRESION:
      case CAPTURARDATO:
      case OPERACIONESCARACTER:
      case ABRIRARCHIVO:
      case COPIARCADENA:
      case COMPARARCADENA:
      case ENCONTRARCADENA:
      case CONCATENARCADENA:
      case NUMEROALEATORIO:
      case PARENTESISAPERTURA:
      case LISTA:
      case PRIMEROLISTA:
      case ULTIMOLISTA:
      case OBTENER:
      case ASIGNAR:
      case PARA:
      case MIENTRAS:
      case CADAUNO:
      case CONDICION:
      case FLUJOCONTROL:
      case INTENTAR:
      case TIPODATO:
      case ESTRUCTURA:
      case AMPERSON:
      case CREAR:
      case USAR:
      case INSERTAR:
      case SELECCIONAR:
      case MAXIMOLISTA:
      case MINIMOLISTA:
      case QUITARESPACIOS:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_13;
      }
      Bloque();
    }
    jj_consume_token(LLAVECERRADURA);
}

  static final public void Instruccion_Excepciones() throws ParseException {
    jj_consume_token(INTENTAR);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPRESION:
      case CAPTURARDATO:
      case OPERACIONESCARACTER:
      case ABRIRARCHIVO:
      case COPIARCADENA:
      case COMPARARCADENA:
      case ENCONTRARCADENA:
      case CONCATENARCADENA:
      case NUMEROALEATORIO:
      case PARENTESISAPERTURA:
      case LISTA:
      case PRIMEROLISTA:
      case ULTIMOLISTA:
      case OBTENER:
      case ASIGNAR:
      case PARA:
      case MIENTRAS:
      case CADAUNO:
      case CONDICION:
      case FLUJOCONTROL:
      case INTENTAR:
      case TIPODATO:
      case ESTRUCTURA:
      case AMPERSON:
      case CREAR:
      case USAR:
      case INSERTAR:
      case SELECCIONAR:
      case MAXIMOLISTA:
      case MINIMOLISTA:
      case QUITARESPACIOS:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_14;
      }
      Bloque();
    }
    jj_consume_token(ATRAPAR);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPRESION:
      case CAPTURARDATO:
      case OPERACIONESCARACTER:
      case ABRIRARCHIVO:
      case COPIARCADENA:
      case COMPARARCADENA:
      case ENCONTRARCADENA:
      case CONCATENARCADENA:
      case NUMEROALEATORIO:
      case PARENTESISAPERTURA:
      case LISTA:
      case PRIMEROLISTA:
      case ULTIMOLISTA:
      case OBTENER:
      case ASIGNAR:
      case PARA:
      case MIENTRAS:
      case CADAUNO:
      case CONDICION:
      case FLUJOCONTROL:
      case INTENTAR:
      case TIPODATO:
      case ESTRUCTURA:
      case AMPERSON:
      case CREAR:
      case USAR:
      case INSERTAR:
      case SELECCIONAR:
      case MAXIMOLISTA:
      case MINIMOLISTA:
      case QUITARESPACIOS:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_15;
      }
      Bloque();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FINALIZAR:{
      jj_consume_token(FINALIZAR);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPRESION:
        case CAPTURARDATO:
        case OPERACIONESCARACTER:
        case ABRIRARCHIVO:
        case COPIARCADENA:
        case COMPARARCADENA:
        case ENCONTRARCADENA:
        case CONCATENARCADENA:
        case NUMEROALEATORIO:
        case PARENTESISAPERTURA:
        case LISTA:
        case PRIMEROLISTA:
        case ULTIMOLISTA:
        case OBTENER:
        case ASIGNAR:
        case PARA:
        case MIENTRAS:
        case CADAUNO:
        case CONDICION:
        case FLUJOCONTROL:
        case INTENTAR:
        case TIPODATO:
        case ESTRUCTURA:
        case AMPERSON:
        case CREAR:
        case USAR:
        case INSERTAR:
        case SELECCIONAR:
        case MAXIMOLISTA:
        case MINIMOLISTA:
        case QUITARESPACIOS:
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_16;
        }
        Bloque();
      }
      RegresaValor();
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(LLAVECERRADURA);
}

  static final public void Instruccion_DeclararMetodo() throws ParseException {
    jj_consume_token(AMPERSON);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:
      case IDENTIFICADOR:
      case CADENA:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:
      case IDENTIFICADOR:{
        ID_Numero();
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(FLECHA);
    jj_consume_token(IDENTIFICADOR);
}

  static final public void estructuraC() throws ParseException {
    jj_consume_token(ESTRUCTURA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(LLAVEAPERTURA);
    label_18:
    while (true) {
      jj_consume_token(TIPODATO);
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CORCHETEAPERTURA:{
        jj_consume_token(CORCHETEAPERTURA);
        jj_consume_token(NUMERO);
        jj_consume_token(CORCHETECERRADURA);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPODATO:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_18;
      }
    }
    jj_consume_token(LLAVECERRADURA);
    jj_consume_token(SEMICOLON);
}

  static final public void cadaElemento() throws ParseException {
    jj_consume_token(CADAUNO);
    jj_consume_token(PARENTESISAPERTURA);
    jj_consume_token(TIPODATO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(EN);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(LLAVEAPERTURA);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPRESION:
      case CAPTURARDATO:
      case OPERACIONESCARACTER:
      case ABRIRARCHIVO:
      case COPIARCADENA:
      case COMPARARCADENA:
      case ENCONTRARCADENA:
      case CONCATENARCADENA:
      case NUMEROALEATORIO:
      case PARENTESISAPERTURA:
      case LISTA:
      case PRIMEROLISTA:
      case ULTIMOLISTA:
      case OBTENER:
      case ASIGNAR:
      case PARA:
      case MIENTRAS:
      case CADAUNO:
      case CONDICION:
      case FLUJOCONTROL:
      case INTENTAR:
      case TIPODATO:
      case ESTRUCTURA:
      case AMPERSON:
      case CREAR:
      case USAR:
      case INSERTAR:
      case SELECCIONAR:
      case MAXIMOLISTA:
      case MINIMOLISTA:
      case QUITARESPACIOS:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_19;
      }
      Bloque();
    }
    jj_consume_token(LLAVECERRADURA);
}

  static final public void EscribirDato() throws ParseException {
    jj_consume_token(IMPRESION);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARROBA:{
        jj_consume_token(ARROBA);
        jj_consume_token(NUMERO);
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARROBA:
      case CADENA:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_20;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLECHA:{
      jj_consume_token(FLECHA);
      label_21:
      while (true) {
        jj_consume_token(IDENTIFICADOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          break label_21;
        }
      }
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
}

  static final public void leerDato() throws ParseException {
    jj_consume_token(CAPTURARDATO);
    label_22:
    while (true) {
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        break label_22;
      }
    }
    jj_consume_token(SEMICOLON);
}

  static final public void manejoArchivo() throws ParseException {
    jj_consume_token(ABRIRARCHIVO);
    jj_consume_token(PARENTESISAPERTURA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(COMA);
    OpArchivos();
    jj_consume_token(COMA);
    jj_consume_token(BOOLEANO);
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(SEMICOLON);
}

  static final public void OpArchivos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABRIRARCHIVO:{
      jj_consume_token(ABRIRARCHIVO);
      break;
      }
    case RENOMBRARARCHIVO:{
      jj_consume_token(RENOMBRARARCHIVO);
      break;
      }
    case REMOVERARCHIVO:{
      jj_consume_token(REMOVERARCHIVO);
      break;
      }
    case LEERARCHIVO:{
      jj_consume_token(LEERARCHIVO);
      break;
      }
    case IMPRIMIRARCHIVO:{
      jj_consume_token(IMPRIMIRARCHIVO);
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void moverElementoLista() throws ParseException {
    jj_consume_token(LISTA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARENTESISAPERTURA);
    jj_consume_token(NUMERO);
    jj_consume_token(COMA);
    jj_consume_token(NUMERO);
    jj_consume_token(COMA);
    jj_consume_token(MOVERELEMENTO);
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(SEMICOLON);
}

  static final public void numAleatorio() throws ParseException {
    jj_consume_token(NUMEROALEATORIO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(COMA);
    jj_consume_token(TIPODATO);
    jj_consume_token(COMA);
    jj_consume_token(PULSOSDERELOJ);
    jj_consume_token(COMA);
    jj_consume_token(OPERADORMATEMATICO);
    jj_consume_token(SEMICOLON);
}

  static final public void RegresaValor() throws ParseException {
    jj_consume_token(REGRESAR);
    ID_Numero();
    jj_consume_token(SEMICOLON);
}

  static final public void ID_Numero() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    case NUMERO:{
      jj_consume_token(NUMERO);
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void OperacionLista() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIMEROLISTA:{
      jj_consume_token(PRIMEROLISTA);
      break;
      }
    case ULTIMOLISTA:{
      jj_consume_token(ULTIMOLISTA);
      break;
      }
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARENTESISAPERTURA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(SEMICOLON);
}

  static final public void OperacionesString() throws ParseException {
    OpString();
    jj_consume_token(PARENTESISAPERTURA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(COMA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    case CADENA:{
      jj_consume_token(CADENA);
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(SEMICOLON);
}

  static final public void OpString() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COPIARCADENA:{
      jj_consume_token(COPIARCADENA);
      break;
      }
    case COMPARARCADENA:{
      jj_consume_token(COMPARARCADENA);
      break;
      }
    case ENCONTRARCADENA:{
      jj_consume_token(ENCONTRARCADENA);
      break;
      }
    case CONCATENARCADENA:{
      jj_consume_token(CONCATENARCADENA);
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void OpCaracter() throws ParseException {
    jj_consume_token(OPERACIONESCARACTER);
    jj_consume_token(PARENTESISAPERTURA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CADENA:{
      jj_consume_token(CADENA);
      break;
      }
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(SEMICOLON);
}

  static final public void QuitarEspacio() throws ParseException {
    jj_consume_token(QUITARESPACIOS);
    jj_consume_token(PARENTESISAPERTURA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CADENA:{
      jj_consume_token(CADENA);
      break;
      }
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(SEMICOLON);
}

  static final public void MaxMinLista() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAXIMOLISTA:{
      jj_consume_token(MAXIMOLISTA);
      break;
      }
    case MINIMOLISTA:{
      jj_consume_token(MINIMOLISTA);
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARENTESISAPERTURA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(SEMICOLON);
}

/*Secuencias SQL*/
  static final public void seleccionarDatoBD() throws ParseException {
    jj_consume_token(SELECCIONAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      label_23:
      while (true) {
        ID_Multiple();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFICADOR:{
          ;
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          break label_23;
        }
      }
      break;
      }
    case ASTERISCO:{
      jj_consume_token(ASTERISCO);
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DESDE);
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DONDE:{
      jj_consume_token(DONDE);
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(ASIGNACION);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMERO:{
        jj_consume_token(NUMERO);
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
}

  static final public void ID_Multiple() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      jj_consume_token(IDENTIFICADOR);
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      ;
    }
}

  static final public void usarBD() throws ParseException {
    jj_consume_token(USAR);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(SEMICOLON);
}

  static final public void crearDatosBD() throws ParseException {
    jj_consume_token(CREAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TABLA:{
      jj_consume_token(TABLA);
      break;
      }
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CONDICION:{
      jj_consume_token(CONDICION);
      jj_consume_token(OPERADORLOGICO_NOT);
      jj_consume_token(EXISTE);
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PARENTESISAPERTURA:{
      crearTabla();
      break;
      }
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
}

  static final public void agregarDatosBD() throws ParseException {
    jj_consume_token(INSERTAR);
    jj_consume_token(DENTRO);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(VALORES);
    jj_consume_token(PARENTESISAPERTURA);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        break;
        }
      case CADENA:{
        jj_consume_token(CADENA);
        break;
        }
      case NUMERO:{
        jj_consume_token(NUMERO);
        break;
        }
      case TIEMPO:{
        jj_consume_token(TIEMPO);
        break;
        }
      case COMA:{
        jj_consume_token(COMA);
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:
      case TIEMPO:
      case NUMERO:
      case IDENTIFICADOR:
      case CADENA:{
        ;
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        break label_24;
      }
    }
    jj_consume_token(PARENTESISCERRADURA);
    jj_consume_token(SEMICOLON);
}

  static final public void crearTabla() throws ParseException {
    jj_consume_token(PARENTESISAPERTURA);
    jj_consume_token(IDENTIFICADOR);
    datoBD();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMA:{
        ;
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        break label_25;
      }
      jj_consume_token(COMA);
      jj_consume_token(IDENTIFICADOR);
      datoBD();
    }
    jj_consume_token(PARENTESISCERRADURA);
}

  static final public void datoBD() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIPODATO:{
      jj_consume_token(TIPODATO);
      break;
      }
    case TIEMPO:{
      jj_consume_token(TIEMPO);
      break;
      }
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void InstruccionGET() throws ParseException {
    jj_consume_token(OBTENER);
    jj_consume_token(LLAVEAPERTURA);
    jj_consume_token(REGRESAR);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(SEMICOLON);
    jj_consume_token(LLAVECERRADURA);
}

  static final public void InstruccionSET() throws ParseException {
    jj_consume_token(ASIGNAR);
    jj_consume_token(LLAVEAPERTURA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ASIGNACION);
    jj_consume_token(VALOR);
    jj_consume_token(SEMICOLON);
    jj_consume_token(LLAVECERRADURA);
}

  static final public void Bloque() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PARA:{
      Instruccion_For();
      break;
      }
    case FLUJOCONTROL:{
      Instruccion_Switch();
      break;
      }
    case TIPODATO:{
      Asignacion_variable();
      break;
      }
    case CONDICION:{
      Instruccion_If();
      break;
      }
    case MIENTRAS:{
      instruccion_while();
      break;
      }
    case INTENTAR:{
      Instruccion_Excepciones();
      break;
      }
    case AMPERSON:{
      Instruccion_DeclararMetodo();
      break;
      }
    case ESTRUCTURA:{
      estructuraC();
      break;
      }
    case CADAUNO:{
      cadaElemento();
      break;
      }
    case IMPRESION:{
      EscribirDato();
      break;
      }
    case CAPTURARDATO:{
      leerDato();
      break;
      }
    case ABRIRARCHIVO:{
      manejoArchivo();
      break;
      }
    case LISTA:{
      moverElementoLista();
      break;
      }
    case NUMEROALEATORIO:{
      numAleatorio();
      break;
      }
    case PRIMEROLISTA:
    case ULTIMOLISTA:{
      OperacionLista();
      break;
      }
    case COPIARCADENA:
    case COMPARARCADENA:
    case ENCONTRARCADENA:
    case CONCATENARCADENA:{
      OperacionesString();
      break;
      }
    case IDENTIFICADOR:{
      Operacion_Aritmetica();
      break;
      }
    case OPERACIONESCARACTER:{
      OpCaracter();
      break;
      }
    case QUITARESPACIOS:{
      QuitarEspacio();
      break;
      }
    case MAXIMOLISTA:
    case MINIMOLISTA:{
      MaxMinLista();
      break;
      }
    case SELECCIONAR:{
      seleccionarDatoBD();
      break;
      }
    case CREAR:{
      crearDatosBD();
      break;
      }
    case USAR:{
      usarBD();
      break;
      }
    case PARENTESISAPERTURA:{
      crearTabla();
      break;
      }
    case INSERTAR:{
      agregarDatosBD();
      break;
      }
    case OBTENER:{
      InstruccionGET();
      break;
      }
    case ASIGNAR:{
      InstruccionSET();
      break;
      }
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ProgramaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[68];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	   jj_la1_init_5();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c05a0,0x0,0x0,0x3c05a0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c05a0,0x0,0x0,0x3c05a0,0x0,0x0,0x0,0x3c05a0,0x40,0x3c05a0,0x0,0x3c05a0,0x3c05a0,0x3c05a0,0x3c05a0,0x0,0x0,0x0,0x0,0x0,0x3c05a0,0x0,0x0,0x0,0x0,0x0,0x1b400,0x0,0x0,0x0,0x3c0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3c05a0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x700022,0x0,0x0,0x700022,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x700022,0x0,0x0,0x700022,0x0,0x0,0x1000,0x700022,0x0,0x700022,0x100,0x700022,0x700022,0x700022,0x700022,0x0,0x0,0x0,0x200,0x0,0x700022,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x20,0x1000,0x1000,0x1000,0x0,0x700022,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd8000030,0x0,0x0,0xd8000030,0x2000000,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0xd8000030,0x0,0x0,0xd8000030,0x0,0x0,0x0,0xd8000030,0x0,0xd8000030,0x0,0xd8000030,0xd8000030,0xd8000030,0xd8000030,0x0,0x0,0x0,0x0,0x0,0xd8000030,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0xd8000030,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x8,0x0,0x8000,0x30000,0x10000,0x0,0x110280,0x4000,0x40,0x110280,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x110280,0x2,0x2000,0x110280,0x0,0x0,0x0,0x110280,0x0,0x110280,0x1,0x110280,0x110280,0x110280,0x110280,0x800,0x0,0x0,0x0,0x10000,0x110280,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x110280,};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x11880000,0x0,0x0,0x11880000,0x20,0x100000,0x0,0x0,0x0,0x24000,0x0,0x24000,0x0,0x11880000,0x0,0x0,0x11880000,0x0,0x0,0x0,0x11880000,0x0,0x11880000,0x0,0x11880000,0x11880000,0x11880000,0x11880000,0x0,0x0,0x0,0x0,0x0,0x11880000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x2000000,0x0,0x0,0x400000,0x400000,0x0,0x400000,0x11880000,};
	}
	private static void jj_la1_init_5() {
	   jj_la1_5 = new int[] {0x1000,0x2000000,0x0,0x200000,0x0,0x0,0x0,0x0,0x2002502,0x0,0x0,0x2002502,0x9800000,0x0,0x1800000,0x3800000,0x3800000,0x0,0x3800000,0x0,0xb800000,0x2002502,0x0,0x0,0x2002502,0x9800000,0x9800000,0x9800000,0x2002502,0x0,0x2002502,0x0,0x2002502,0x2002502,0x2002502,0x2002502,0x0,0xa800000,0xa800000,0x0,0x0,0x2002502,0x8000000,0x8000000,0x2000000,0x400000,0x2000000,0x0,0x2800000,0x0,0xa000000,0x0,0xa000000,0xa000000,0x500,0x2000000,0x2000000,0x8800000,0x8,0x0,0x0,0x0,0x0,0xa800000,0xa800000,0x0,0x0,0x2002502,};
	}

  /** Constructor with InputStream. */
  public Programa(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Programa(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ProgramaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 68; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 68; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Programa(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ProgramaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 68; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ProgramaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 68; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Programa(ProgramaTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 68; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ProgramaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 68; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[188];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 68; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		   if ((jj_la1_5[i] & (1<<j)) != 0) {
			 la1tokens[160+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 188; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
